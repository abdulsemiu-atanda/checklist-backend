# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on: [push, pull_request]

jobs:
  build:
    runs-on:
      ubuntu-latest
      # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
      - run: yarn --frozen-lockfile
      - run: yarn run build
      - run: yarn test
        env:
          HASH_SALT: ${{ secrets.HASH_SALT }}
          SECRET: ${{ secrets.SECRET }}
          ENCRYPTION_SALT: ${{ secrets.ENCRYPTION_SALT }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          DATA_ENCRYPTION_KEY: ${{ secrets.DATA_ENCRYPTION_KEY }}
          DATA_DIGEST_KEY: ${{ secrets.DATA_DIGEST_KEY }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          JS_LOG: ${{ secrets.JS_LOG }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
